import React, { useState, useEffect } from 'react';
import { observer } from 'mobx-react';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Dashboard } from '@/types/dashboard';
import { databaseStore } from '@/stores/DatabaseStore';
import { dashboardsRepository } from '@/stores/DashboardsRepository';
import { cn } from '@/lib/utils';

interface DashboardFormModalProps {
	open: boolean;
	onClose: () => void;
	dashboard?: Dashboard | null;
}

interface DashboardFormData {
	name: string;
	databaseId: string;
	icon: string;
}

const defaultFormData: DashboardFormData = {
	name: '',
	databaseId: '',
	icon: 'üìà',
};

export const DashboardFormModal: React.FC<DashboardFormModalProps> = observer(({ open, onClose, dashboard }) => {
	const [formData, setFormData] = useState<DashboardFormData>(defaultFormData);
	const [isSubmitting, setIsSubmitting] = useState(false);
	const [errors, setErrors] = useState<Record<string, string>>({});

	const { allDatabases } = databaseStore;

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
	useEffect(() => {
		if (open) {
			if (dashboard) {
				setFormData({
					name: dashboard.name,
					databaseId: dashboard.databaseId,
					icon: dashboard.icon || 'üìà',
				});
			} else {
				setFormData(defaultFormData);
			}
			setErrors({});
		}
	}, [open, dashboard]);

	// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
	const validateForm = (): boolean => {
		const newErrors: Record<string, string> = {};

		if (!formData.name.trim()) {
			newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—à–±–æ—Ä–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
		}

		if (!formData.databaseId) {
			newErrors.databaseId = '–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö';
		}

		setErrors(newErrors);
		return Object.keys(newErrors).length === 0;
	};

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
	const handleSubmit = async (e: React.FormEvent) => {
		e.preventDefault();

		if (!validateForm()) {
			return;
		}

		setIsSubmitting(true);
		try {
			if (dashboard) {
				await dashboardsRepository.updateDashboard(dashboard.id, {
					name: formData.name.trim(),
					icon: formData.icon.trim() || 'üìà',
					databaseId: formData.databaseId,
				});
			} else {
				await dashboardsRepository.createDashboard({
					name: formData.name.trim(),
					icon: formData.icon.trim() || 'üìà',
					databaseId: formData.databaseId,
				});
			}

			onClose();
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—à–±–æ—Ä–¥–∞:', error);
			setErrors({
				general: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—à–±–æ—Ä–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
			});
		} finally {
			setIsSubmitting(false);
		}
	};

	const handleInputChange = (field: keyof DashboardFormData, value: string) => {
		setFormData(prev => ({ ...prev, [field]: value }));
		// –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
		if (errors[field]) {
			setErrors(prev => ({ ...prev, [field]: '' }));
		}
	};

	return (
		<Dialog open={open} onOpenChange={onClose}>
			<DialogContent className="sm:max-w-[500px]">
				<DialogHeader>
					<DialogTitle>{dashboard ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—à–±–æ—Ä–¥' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ—à–±–æ—Ä–¥'}</DialogTitle>
					{!dashboard && (
						<DialogDescription>
							–°–æ–∑–¥–∞–π—Ç–µ –¥–µ—à–±–æ—Ä–¥ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
						</DialogDescription>
					)}
				</DialogHeader>

				<form onSubmit={handleSubmit} className="space-y-4">
					{/* –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—à–±–æ—Ä–¥–∞ */}
					<div className="flex flex-row gap-2">
						<div className="space-y-2 flex-1">
							<Label htmlFor="name">
								–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—à–±–æ—Ä–¥–∞ <span className="text-red-500">*</span>
							</Label>
							<Input
								id="name"
								value={formData.name}
								onChange={e => handleInputChange('name', e.target.value)}
								placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—à–±–æ—Ä–¥–∞"
								className={errors.name ? 'border-red-500' : ''}
								autoCorrect="off"
								autoCapitalize="off"
								spellCheck={false}
							/>
							{errors.name && <p className="text-sm text-red-500">{errors.name}</p>}
						</div>
						<div className="space-y-2 max-w-[70px]">
							<Label htmlFor="icon">–ò–∫–æ–Ω–∫–∞</Label>
							<Input
								id="icon"
								value={formData.icon}
								onChange={e => handleInputChange('icon', e.target.value)}
								placeholder="üìà"
								maxLength={10}
								autoCorrect="off"
								autoCapitalize="off"
								spellCheck={false}
							/>
						</div>
					</div>

					{/* –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö */}
					<div className="space-y-2">
						<Label htmlFor="databaseId">
							–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö <span className="text-red-500">*</span>
						</Label>
						<Select
							value={formData.databaseId}
							onValueChange={value => handleInputChange('databaseId', value)}
							disabled={!!dashboard} // –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –ë–î —É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–µ—à–±–æ—Ä–¥–∞
						>
							<SelectTrigger className={cn(errors.databaseId ? 'border-red-500' : '', 'w-full')}>
								<SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö" />
							</SelectTrigger>
							<SelectContent>
								{allDatabases.length === 0 ? (
									<SelectItem value="" disabled>
										–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
									</SelectItem>
								) : (
									allDatabases.map(database => (
										<SelectItem key={database.id} value={database.id}>
											<span className="text-sm font-medium">{database.name}</span>
										</SelectItem>
									))
								)}
							</SelectContent>
						</Select>
						{errors.databaseId && <p className="text-sm text-red-500">{errors.databaseId}</p>}
					</div>

					{/* –û–±—â–∞—è –æ—à–∏–±–∫–∞ */}
					{errors.general && (
						<div className="text-sm text-red-500 bg-red-50 dark:bg-red-900/20 p-3 rounded">
							{errors.general}
						</div>
					)}

					{/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
					<div className="flex gap-3 pt-4">
						<Button type="submit" disabled={isSubmitting} className="flex-1">
							{isSubmitting ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : dashboard ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
						</Button>
						<Button type="button" variant="outline" onClick={onClose} disabled={isSubmitting}>
							–û—Ç–º–µ–Ω–∞
						</Button>
					</div>
				</form>
			</DialogContent>
		</Dialog>
	);
});
