import { observable, action, makeObservable, computed } from 'mobx';

export type TabType =
	| 'empty-tab'
	| 'dashboard-list'
	| 'dashboard'
	| 'database'
	| 'widgets-library'
	| 'playground'
	| 'welcome';

export interface AppTab {
	id: string;
	type: TabType;
	title: string;
	isActive: boolean;
	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–∫–ª–∞–¥–∫–∏
	payload?: {
		dashboardId?: string;
		dashboardIcon?: string; // emoji –∏–∫–æ–Ω–∫–∞ –¥–µ—à–±–æ—Ä–¥–∞
		databaseId?: string;
		[key: string]: any;
	};
}

export class AppTabsStore {
	// –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤–∫–ª–∞–¥–æ–∫
	@observable private tabs = new Map<string, AppTab>();
	@observable private activeTabId: string | null = null;

	// –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
	@computed
	get allTabs(): AppTab[] {
		return Array.from(this.tabs.values());
	}

	@computed
	get activeTab(): AppTab | undefined {
		return this.activeTabId ? this.tabs.get(this.activeTabId) : undefined;
	}

	/**
	 * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
	 */
	getTabIcon(tab: AppTab): string {
		switch (tab.type) {
			case 'empty-tab':
				return 'üè†'; // Home
			case 'dashboard-list':
				return 'üìä'; // Dashboard list
			case 'dashboard':
				return tab.payload?.dashboardIcon || 'üìà'; // Dashboard –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –¥–µ—à–±–æ—Ä–¥–∞
			case 'database':
				return 'üóÉÔ∏è'; // Database
			case 'widgets-library':
				return 'üß©'; // Widgets/Components
			case 'playground':
				return '‚ö°'; // Playground/Code
			case 'welcome':
				return 'üëã'; // Welcome/Wave
			default:
				return 'üìÑ'; // Default page
		}
	}

	constructor() {
		makeObservable(this);
		this.initializeWithDefaultTab();
	}

	/**
	 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–µ—Ä–≤–æ–π –ø—É—Å—Ç–æ–π –≤–∫–ª–∞–¥–∫–æ–π
	 */
	@action
	private initializeWithDefaultTab(): void {
		const defaultTab: AppTab = {
			id: 'default-tab',
			type: 'empty-tab',
			title: '–ì–ª–∞–≤–Ω–∞—è',
			isActive: true,
		};

		this.tabs.set(defaultTab.id, defaultTab);
		this.activeTabId = defaultTab.id;
	}

	/**
	 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø—É—Å—Ç—É—é –≤–∫–ª–∞–¥–∫—É
	 */
	@action
	createNewTab(): void {
		const id = `tab-${Date.now()}`;
		const newTab: AppTab = {
			id,
			type: 'empty-tab',
			title: '–ì–ª–∞–≤–Ω–∞—è',
			isActive: false,
		};

		// –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
		this.allTabs.forEach(tab => {
			tab.isActive = false;
		});

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
		newTab.isActive = true;
		this.tabs.set(id, newTab);
		this.activeTabId = id;
	}

	/**
	 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–µ—à–±–æ—Ä–¥ –≤ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ
	 */
	@action
	openDashboard(dashboardId: string, dashboardTitle: string, dashboardIcon?: string, tabId?: string): void {
		const targetTabId = tabId || this.activeTabId;

		if (!targetTabId) {
			this.createNewTab();
			const newTabId = this.activeTabId!;
			this.openDashboard(dashboardId, dashboardTitle, dashboardIcon, newTabId);
			return;
		}

		const tab = this.tabs.get(targetTabId);
		if (tab) {
			tab.type = 'dashboard';
			tab.title = dashboardTitle;
			tab.payload = {
				dashboardId,
				dashboardIcon,
			};
			this.setActiveTab(targetTabId);
		}
	}

	/**
	 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ –∏–ª–∏ —Ç–µ–∫—É—â–µ–π (–µ—Å–ª–∏ –ø—É—Å—Ç–∞—è)
	 */
	@action
	openDatabase(databaseId: string, databaseTitle: string): void {
		// –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞ –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
		if (this.isEmptyTab()) {
			const tab = this.tabs.get(this.activeTabId!);
			if (tab) {
				tab.type = 'database';
				tab.title = databaseTitle;
				tab.payload = { databaseId };
			}
		} else {
			// –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
			const id = `database-${Date.now()}`;
			const newTab: AppTab = {
				id,
				type: 'database',
				title: databaseTitle,
				isActive: false,
				payload: { databaseId },
			};

			this.tabs.set(id, newTab);
			this.setActiveTab(id);
		}
	}

	/**
	 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É –≤–∏–¥–∂–µ—Ç–æ–≤ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ –∏–ª–∏ —Ç–µ–∫—É—â–µ–π (–µ—Å–ª–∏ –ø—É—Å—Ç–∞—è)
	 */
	@action
	openWidgetsLibrary(): void {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞—è –≤–∫–ª–∞–¥–∫–∞ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –≤–∏–¥–∂–µ—Ç–æ–≤
		const existingTab = this.allTabs.find(tab => tab.type === 'widgets-library');

		if (existingTab) {
			this.setActiveTab(existingTab.id);
			return;
		}

		// –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞ –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
		if (this.isEmptyTab()) {
			const tab = this.tabs.get(this.activeTabId!);
			if (tab) {
				tab.type = 'widgets-library';
				tab.title = '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≤–∏–¥–∂–µ—Ç–æ–≤';
				tab.payload = undefined;
			}
		} else {
			// –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
			const id = `widgets-lib-${Date.now()}`;
			const newTab: AppTab = {
				id,
				type: 'widgets-library',
				title: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≤–∏–¥–∂–µ—Ç–æ–≤',
				isActive: false,
			};

			this.tabs.set(id, newTab);
			this.setActiveTab(id);
		}
	}

	/**
	 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç playground –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ –∏–ª–∏ —Ç–µ–∫—É—â–µ–π (–µ—Å–ª–∏ –ø—É—Å—Ç–∞—è)
	 */
	@action
	openPlayground(): void {
		// –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞ –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
		if (this.isEmptyTab()) {
			const tab = this.tabs.get(this.activeTabId!);
			if (tab) {
				tab.type = 'playground';
				tab.title = 'Playground';
				tab.payload = undefined;
			}
		} else {
			// –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
			const id = `playground-${Date.now()}`;
			const newTab: AppTab = {
				id,
				type: 'playground',
				title: 'Playground',
				isActive: false,
			};

			this.tabs.set(id, newTab);
			this.setActiveTab(id);
		}
	}

	/**
	 * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
	 */
	@action
	setActiveTab(tabId: string): void {
		// –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
		this.allTabs.forEach(tab => {
			tab.isActive = false;
		});

		// –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
		const tab = this.tabs.get(tabId);
		if (tab) {
			tab.isActive = true;
			this.activeTabId = tabId;
		}
	}

	/**
	 * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É
	 */
	@action
	closeTab(tabId: string): void {
		const tab = this.tabs.get(tabId);
		if (!tab) return;

		// –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
		const wasActive = tab.isActive;
		this.tabs.delete(tabId);

		// –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–∫–ª–∞–¥–∫–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
		if (this.tabs.size === 0) {
			this.initializeWithDefaultTab();
			return;
		}

		// –ï—Å–ª–∏ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥—Ä—É–≥—É—é
		if (wasActive) {
			const remainingTabs = this.allTabs;
			if (remainingTabs.length > 0) {
				this.setActiveTab(remainingTabs[0].id);
			}
		}
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–∫–ª–∞–¥–∫–∞ –ø—É—Å—Ç–æ–π (empty-tab)
	 */
	isEmptyTab(tabId?: string): boolean {
		const targetTabId = tabId || this.activeTabId;
		if (!targetTabId) return false;

		const tab = this.tabs.get(targetTabId);
		return tab?.type === 'empty-tab';
	}

	/**
	 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ—à–±–æ—Ä–¥–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∏–ª–∏ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
	 */
	@action
	openDashboardList(): void {
		// –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞ –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
		if (this.isEmptyTab()) {
			const tab = this.tabs.get(this.activeTabId!);
			if (tab) {
				tab.type = 'dashboard-list';
				tab.title = '–î–µ—à–±–æ—Ä–¥—ã';
				tab.payload = undefined;
			}
		} else {
			// –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
			const id = `dashboard-list-${Date.now()}`;
			const newTab: AppTab = {
				id,
				type: 'dashboard-list',
				title: '–î–µ—à–±–æ—Ä–¥—ã',
				isActive: false,
			};

			this.tabs.set(id, newTab);
			this.setActiveTab(id);
		}
	}

	/**
	 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—É—Å—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ –≤ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ
	 */
	@action
	showEmptyTab(tabId?: string): void {
		const targetTabId = tabId || this.activeTabId;

		if (!targetTabId) return;

		const tab = this.tabs.get(targetTabId);
		if (tab) {
			tab.type = 'empty-tab';
			tab.title = '–ì–ª–∞–≤–Ω–∞—è';
			tab.payload = undefined;
		}
	}
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const appTabsStore = new AppTabsStore();
